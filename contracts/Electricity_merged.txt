// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10.0;

contract EnergySharingSystem {
    
    // Struct to store data for each house
    struct House {
        uint256 solarPanelStrength;     // strength of the solar panel in Watts
        uint256 energyConsumption;      // current energy consumption in Watt-hours
        int256 energySurplus;           // surplus energy in Watt-hours
        bool isRegistered;              // flag to indicate if the house is registered
    }
    
    mapping(address => House) public houses;
    
    // Event to log when a house is registered or updated
    event HouseRegistered(address indexed houseAddress, uint256 solarPanelStrength, uint256 energyConsumption);
    
    // Event to log when energy is shared
    event EnergyShared(address indexed fromHouse, address indexed toHouse, uint256 amount);
    
    // Function to register or update a house
    function registerOrUpdateHouse(uint256 _solarPanelStrength, uint256 _energyConsumption) external {
        House storage house = houses[msg.sender];
        
        if (!house.isRegistered) {
            house.isRegistered = true;
            house.solarPanelStrength = _solarPanelStrength;
            emit HouseRegistered(msg.sender, _solarPanelStrength, _energyConsumption);
        }
        
        house.energyConsumption = _energyConsumption;
        house.energySurplus = int256(_solarPanelStrength) - int256(_energyConsumption);
        emit HouseRegistered(msg.sender, _solarPanelStrength, _energyConsumption);
    }
    
    // Function to share energy between two houses
    function shareEnergy(address _fromHouse, address _toHouse, uint256 _amount) external {
        require(houses[_fromHouse].isRegistered && houses[_toHouse].isRegistered, "One or more houses are not registered");
        require(houses[_fromHouse].energySurplus >= int256(_amount), "Not enough energy surplus");
        houses[_fromHouse].energySurplus -= int256(_amount);
        houses[_toHouse].energySurplus += int256(_amount);
        emit EnergyShared(_fromHouse, _toHouse, _amount);
    }
}
